package Hangman;


import java.util.*;

public class Hangman {  

public static void main(String [] args) {


String [] secretWordsList =   //choose secret word from these
{"Leila", "Marcel", "Nicholas", "Jason", "Kyle", "Audrey",
"Noah", "Ben", "Madeline", "Camille", "Boyko", "cake",
"remote", "boots", "terminology", "arm", "cranberry", "tool",
"caterpillar", "spoon", "watermelon", "laptop", "toe", "toad",
"fundamental", "capitol", "garbage", "anticipate", "pesky"};


final int MAX_BAD_GUESSES = 7;  //user can guess up to 7 characters




String secretWord;
//REMOVE LINE BELOW WHEN DONE IMPLEMENTING
//secretWord = "miscellaneous";
secretWord = "tea";

//Randomly choose a word from list of words
//UNCOMMENT LINES BELOW TO PLAY WHEN DONE  IMPLEMENTING
Random randIndex = new Random();
int index = randIndex.nextInt(secretWordsList.length);
secretWord = secretWordsList[index];



//TODO: Finish the line below to construct an array that is
//      the same length as the secret word.
char[] correctLetters = null;

//TODO: Initialize this array's elements to '_' underscore characters.

//TODO: Finish the line below to construct an array that can
//      store up to 7 characters for wrong letter guesses.
//      Hint: Is there a constant that you should use?
char[] incorrectLetters;

//3C. Other Variables (DONE)
int    badGuessesCount = 0;  // count of bad guesses
Scanner stdin = new Scanner(System.in); // for user input



//////////////////////////////////////////////////////////////////////
// 4. MAIN LOOP FOR GAME
//////////////////////////////////////////////////////////////////////

while (!gameWon(correctLetters) && badGuessesCount < MAX_BAD_GUESSES) {

//4A. Call method to print the Hangman picture (DONE).
printHangman(badGuessesCount);

//4B. Print the correct guesses in the secret word.
//TODO: Write the code to display the ENTIRE correctLetters array,
//      that is, display each character in the array separated by
//      a space character.

/////////////////////
// FILL IN CODE HERE
/////////////////////

//4C. Print the incorrect letters that have been guessed.
//TODO: Write the code to display only the USED PART of the 
//      incorrectLetters array, that is, display only the bad
//      guess characters in the array each separated by a space
//      character.  Note incorrectLetters might only be partially
//      filled -- DO NOT DISPLAY THE UNUSED ELEMENTS.
//      Hint: What variable tells you how many bad guesses were made?
System.out.print("\nWrong guesses: ");

/////////////////////
// FILL IN CODE HERE
/////////////////////


//4D. Prompt and read the next guess (DONE)
System.out.print("\n\n--> Enter a lowercase letter for your guess: ");
char guess = stdin.nextLine().charAt(0);

//4E. Process the next guess (PARTIALLY DONE)
//    If the letter "guess" is in the secret word then add it
//    to the correct guesses array in the correct location(s).
//    Otherwise, add the letter "guess" to incorrect guesses.
boolean found = false;  //declaring variable here is okay!

// go through the secret word character by character
for (int i = 0; i < secretWord.length(); i++) {
if (secretWord.charAt(i) == guess) { //if guess matches
found = true;                    //the guess was correct
correctLetters[i] = guess;       //record correct guess
}
}

if (found) {
System.out.println("*** Your guess was correct!");
}
else {


System.out.println("*** Sorry, that letter is not in the secret word");
}
}

System.out.println("\n********************************************");
System.out.println("The secret word was: " + secretWord);
if (gameWon(correctLetters)) {
System.out.println("Congratulations, you won!");
} else {
System.out.println("Sorry, you lost.");
printHangman(badGuessesCount);
}
}




private static boolean gameWon(char[] correctLetters) {


/////////////////////
// FILL IN CODE HERE
/////////////////////


return false;
}



private static void printHangman(int badGuessesCount) {
int poleLines = 6;   // number of lines for hanging pole
System.out.println("  ____");
System.out.println("  |  |");

if (badGuessesCount == 7) {
System.out.println("  |  |");
System.out.println("  |  |");
}

if (badGuessesCount > 0) {              
System.out.println("  |  O");
poleLines = 5;
}

if (badGuessesCount > 1) {
poleLines = 4;
if (badGuessesCount == 2) {
System.out.println("  |  |");
} else if (badGuessesCount == 3) {
System.out.println("  | \\|");
} else if (badGuessesCount >= 4) {
System.out.println("  | \\|/");
}
}

if (badGuessesCount > 4) {
poleLines = 3;
System.out.println("  |  |");
}

if (badGuessesCount == 6) {
poleLines = 2;
System.out.println("  | /");
} else if (badGuessesCount >= 7) {
poleLines = 0;
System.out.println("  | / \\");
}

for (int k = 0; k < poleLines; k++) {
System.out.println("  |");
}
System.out.println("__|__");
System.out.println();
}

}
