package confour;
import java.util.Scanner;
 
public class confour {
 
    public static void main(String[] args) {
        char[][] board = new char[6][7];
 
        displayb(board);
 
        while (true) {
            // This asks the user for their input
            disc('X', board);
 
            displayb(board);
            if (isWon(board)) {
                System.out.println("First player won!");
                System.exit(1);
            } else if (isDraw(board)) {
                System.out.println("No winner.");
                System.exit(2);
            }
 
            // Asks the second user for their input
            disc('O', board);
            displayb(board);
 
            if (isWon(board)) {
                System.out.println("Second player won!");
                System.exit(3);
            } else if (isDraw(board)) {
                System.out.println("No winner.");
                System.exit(4);
            }
        }
    }
 
    public static void disc(char player, char[][] board) {
        Scanner input = new Scanner(System.in);
 
        boolean done = false;
 
        do {
            System.out.print("Drop a " + (player == 'X' ? "first player" : "second player")
                    + " disk at column (0-6): ");
            int column = input.nextInt();
 
            if (placeTheDisk(board, column, player)) {
                done = true;
            } else
                System.out
                        .println("You cannot put any more discs in this colum");
        } while (!done);
    }
 
    static boolean placeTheDisk(char[][] board, int column, char player) {
        for (int i = 0; i < board.length; i++) {
            if (board[i][column] == '\u0000') {
                board[i][column] = player;
                return true; 
            }
        }
        // it will return false if the user inputs a non-applicable column
        return false; 
    }
 
    static void displayb(char[][] board) {
        for (int i = board.length - 1; i >= 0; i--) {
            System.out.print("|");
            for (int j = 0; j < board[i].length; j++)
                System.out.print(board[i][j] != '\u0000' ? board[i][j] + "|"
                        : " |");
            System.out.println();
        }
        System.out.println("----------------------");
    }
 
    public static boolean isWon(char[][] board) {
        return fourinarow(board);
    }
 
    public static boolean isDraw(char[][] board) {
        for (int i = 0; i < board.length; i++)
            for (int j = 0; j < board[i].length; j++)
                if (board[i][j] == '\u0000')
                    return false;
 
        return true; // Cells are all now occupied
    }
 
    public static boolean fourinarow(char[][] values) {
        int numberOfRows = values.length;
        int numberOfColumns = values[0].length;
 
        // Check rows
        for (int i = 0; i < numberOfRows; i++) {
            if (fourinarow(values[i]))
                return true;
        }
 
        // Check columns
        for (int j = 0; j < numberOfColumns; j++) {
            char[] column = new char[numberOfRows];
            // Get a column into an array
            for (int i = 0; i < numberOfRows; i++)
                column[i] = values[i][j];
 
            if (fourinarow(column))
                return true;
        }
 
        // Check major diagonal (lower)
        for (int i = 0; i < numberOfRows - 3; i++) {
            int numberOfElementsInDiagonal = Math.min(numberOfRows - i,
                    numberOfColumns);
            char[] diagonal = new char[numberOfElementsInDiagonal];
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k + i][k];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        // Check major diagonal (upper)
        for (int j = 1; j < numberOfColumns - 3; j++) {
            int numberOfElementsInDiagonal = Math.min(numberOfColumns - j,
                    numberOfRows);
            char[] diagonal = new char[numberOfElementsInDiagonal];
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k][k + j];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        // Check sub-diagonal (left part)
        for (int j = 3; j < numberOfColumns; j++) {
            int numberOfElementsInDiagonal = Math.min(j + 1, numberOfRows);
            char[] diagonal = new char[numberOfElementsInDiagonal];
 
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k][j - k];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        // Check sub-diagonal (right part)
        for (int i = 1; i < numberOfRows - 3; i++) {
            int numberOfElementsInDiagonal = Math.min(numberOfRows - i,
                    numberOfColumns);
            char[] diagonal = new char[numberOfElementsInDiagonal];
 
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k + i][numberOfColumns - k - 1];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        return false;
    }
 
    public static boolean fourinarow(char[] values) {
        for (int i = 0; i < values.length - 3; i++) {
            boolean isEqual = true;
            for (int j = i; j < i + 3; j++) {
                if (values[j] == '\u0000' || values[j] != values[j + 1]) {
                    isEqual = false;
                    break;
                }
            }
 
            if (isEqual)
                return true;
        }
 
        return false;
    }
}

 














package ConnectFour;
import java.util.Scanner;
public class ConnectFour{
public static void main(String[] args) {
}
public void printBoard(String[][]board){
	for(int i = 0; i<6; i++){
		for (int j = 0; j<7;j++) {
			System.out.println(board[i][j] + " "); }
		System.out.println();
		}
	for (int k = 1; k < 8; k++)
		System.out.print(" " + k + " ");
	System.out.println();
	chooseColumn(board);
}
public String [][] makeBoard(String[][] board){
	for( int i = 0; i < 6; i++) {
		for (int j = 0; j < 7; j++) {
			board[i][j] = "[_]" ; }
		}
	printBoard(board);
	return board;
	
	
	}
	
	}


