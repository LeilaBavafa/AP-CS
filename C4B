package connectfour;
import java.util.Scanner;
public class connectfour
{

  public static String[][] createPattern()
  {
   
     String[][] f = new String[7][15];
     
    for (int i =0;i<f.length;i++)
    {
      
       for (int j =0;j<f[i].length;j++)
      {
 
        if (j% 2 == 0) f[i][j] ="|";
        else f[i][j] = " ";
     
        if (i==6) f[i][j]= "-";
      }
       
    }
    return f;
  }

  public static void printPattern(String[][] f)
  {
    for (int i =0;i<f.length;i++)
    {
      for (int j=0;j<f[i].length;j++)
      {
        System.out.print(f[i][j]);
      }
      System.out.println();
    }
  }

  public static void dropRedPattern(String[][] f)
  {
 
    System.out.println("Where would you like to drop the X?: ");
    Scanner scan = new Scanner (System.in);

    int c = 2*scan.nextInt()+1;
    for (int i =5;i>=0;i--)
    {
      if (f[i][c] == " ")
      {
        f[i][c] = "X";
        break;
      }
       
    }
  }

  public static void dropYellowPattern(String[][] f)
  {
    System.out.println("Next player: WHere would you like to drop the O: ");
    Scanner scan = new Scanner (System.in);
    int c = 2*scan.nextInt()+1;
    for (int i =5;i>=0;i--)
    {
      if (f[i][c] == " ")
      {
        f[i][c] = "O";
        break;
      }
       
    }
  }

  public static String checkWinner(String[][] f)
  {
   
    for (int i =0;i<6;i++)
    {

      for (int j=0;j<7;j+=2)
      {
        if ((f[i][j+1] != " ")
        && (f[i][j+3] != " ")
        && (f[i][j+5] != " ")
        && (f[i][j+7] != " ")
        && ((f[i][j+1] == f[i][j+3])
        && (f[i][j+3] == f[i][j+5])
        && (f[i][j+5] == f[i][j+7])))

          return f[i][j+1];  
      }
    }

    for (int i=1;i<15;i+=2)
    {
    
      for (int j =0;j<3;j++)
      {
            if((f[j][i] != " ")
            && (f[j+1][i] != " ")
            && (f[j+2][i] != " ")
            && (f[j+3][i] != " ")
            && ((f[j][i] == f[j+1][i])
            && (f[j+1][i] == f[j+2][i])
            && (f[j+2][i] == f[j+3][i])))
              return f[j][i];  
      }  
    }
     
    
    for (int i=0;i<3;i++)
    {
       
      for (int j=1;j<9;j+=2)
      {
            if((f[i][j] != " ")
            && (f[i+1][j+2] != " ")
            && (f[i+2][j+4] != " ")
            && (f[i+3][j+6] != " ")
            && ((f[i][j] == f[i+1][j+2])
            && (f[i+1][j+2] == f[i+2][j+4])
            && (f[i+2][j+4] == f[i+3][j+6])))
              return f[i][j];  
      }  
    }
     
    for (int i=0;i<3;i++)
    {
      for (int j=7;j<15;j+=2)
      {
            if((f[i][j] != " ")
            && (f[i+1][j-2] != " ")
            && (f[i+2][j-4] != " ")
            && (f[i+3][j-6] != " ")
            && ((f[i][j] == f[i+1][j-2])
            && (f[i+1][j-2] == f[i+2][j-4])
            && (f[i+2][j-4] == f[i+3][j-6])))
              return f[i][j];  
      }  
    }
     
    return null;
  }
   
  public static void main (String[] args)
  {

    String[][] f = createPattern();
   
    boolean loop = true;
  
    int count = 0;
    printPattern(f);
    while(loop)
    {
     
       if (count % 2 == 0) dropRedPattern(f);
       else dropYellowPattern(f);
       count++;
       printPattern(f);
     
       if (checkWinner(f) != null)
       {
          if (checkWinner(f) == "X")
             System.out.println("The first player won.");
          else if (checkWinner(f)== "O")
            System.out.println("The second player won.");
     
         loop = false;
    }
  }
}
}











package confour;
import java.util.Scanner;
public class confour{
public static void main(String[] args) { 
	
}
	public String [][] makeBoard(String [][] check) {
for(int i=0; i<6; i++);
	for( int j=0; j<7; j++);
		check[i][j] = "[_]";{
	printcheck (check);
	return check;
	
	public void printBoard(String[][] board){
		for(int i = 0; i < 6; i++) {
			for ( int j < 7; j++){
				System.out.println(board[i][j] + ""); }
			System.out.println();
		}
		for ( int k + 1; k < 8; k++)
			System.out.println(" " + k + " "));
			System.out.println();
			}
		}
	
		 public static void dropXPattern(String[][] f)
		 {
			 System.out.println("Where would you like to drop the X?: ");
		Scanner scan = new Scanner (System.in);
		int c = 2*scan.nextInt()+1;
		for (int i =5;i>=0;i--)
		{
		if (f[i][j] == " ")
		{
		f[i][j] = "X";
		break;
	}
		 public static void dropOPattern(String[][] f)
		 {
		 System.out.println("Next player: Where would you like to drop the O: ");
		 Scanner scan = new Scanner (System.in);
		 int c = 2*scan.nextInt()+1;
		 for (int i =5;i>=0;i--)
		 {
		 if (f[i][j] == " ")
		 {
		 f[i][j] = "O";
		 break;
		 }
		
}
		}
	}

















package ConnectFourGame;
import java.util.Scanner;
 
public class ConnectFourGame {
 
    public static void main(String[] args) {
        ConnectFourGame runner = new ConnectFourGame();
    	char[][] board = new char[6][7];
    	runner.displayb(board);
        
        //------------------
    }
        public static void dropX(String[][] f)
        {
       
          System.out.println("Where would you like to drop the X?: ");
          Scanner scan = new Scanner (System.in);

          int c = 2*scan.nextInt()+1;
          for (int i =5;i>=0;i--)
          {
            if (f[i][c] == " ")
            {
              f[i][c] = "X";
              break;
            }
             
          }
          printPattern(f);
        }

        public static void dropO(String[][] f)
        {
          System.out.println("Next player: WHere would you like to drop the O: ");
          Scanner scan = new Scanner (System.in);
          int c = 2*scan.nextInt()+1;
          for (int i =5;i>=0;i--)
          {
            if (f[i][c] == " ")
            {
              f[i][c] = "O";
              break;
            }
          }
          printPattern(f);
        }
 
    public static void disc(char player, char[][] board) {
        Scanner input = new Scanner(System.in);
 
        boolean done = false;
 
        do {
            System.out.print("Drop a " + (player == 'X' ? "first player" : "second player")
                    + " disk at column (0-6): ");
            int column = input.nextInt();
 
            if (placeTheDisk(board, column, player)) {
                done = true;
            } else
                System.out
                        .println("You cannot put any more discs in this colum");
        } while (!done);
    }
 
    static boolean placeTheDisk(char[][] board, int column, char player) {
        for (int i = 0; i < board.length; i++) {
            if (board[i][column] == '\u0000') {
                board[i][column] = player;
                return true; 
            }
        }
        // it will return false if the user inputs a non-applicable column
        return false; 
    }
 
    public static String[][] displayb(char[][] board) {
    	 String[][] f = new String[7][15];
         
    	    for (int i =0;i<f.length;i++)
    	    {
    	      
    	       for (int j =0;j<f[i].length;j++)
    	      {
    	 
    	        if (j% 2 == 0) f[i][j] ="|";
    	        else f[i][j] = " ";
    	     
    	        if (i==6) f[i][j]= "-";
    	      }
    	       
    	    }
    	    return f;
    	  }

    	  public static void printPattern(String[][] f)
    	  {
    	    for (int i =0;i<f.length;i++)
    	    {
    	      for (int j=0;j<f[i].length;j++)
    	      {
    	        System.out.print(f[i][j]);
    	      }
    	      System.out.println();
    	    }

        	
        System.out.println("..........................");
    }
 
    public static boolean isWon(char[][] board) {
        return fourinarow(board);
    }
 
    public static boolean isDraw(char[][] board) {
        for (int i = 0; i < board.length; i++)
            for (int j = 0; j < board[i].length; j++)
                if (board[i][j] == '\u0000')
                    return false;
 
        return true; 
// there is no more space in this column
    }
 
    public static boolean fourinarow(char[][] values) {
        int numberOfRows = values.length;
        int numberOfColumns = values[0].length;
 
        // Check rows
        for (int i = 0; i < numberOfRows; i++) {
            if (fourinarow(values[i]))
                return true;
        }
 
        // Check columns
        for (int j = 0; j < numberOfColumns; j++) {
            char[] column = new char[numberOfRows];
            // Get a column into an array
            for (int i = 0; i < numberOfRows; i++)
                column[i] = values[i][j];
 
            if (fourinarow(column))
                return true;
        }
 
        // Check diagonal
        for (int i = 0; i < numberOfRows - 3; i++) {
            int numberOfElementsInDiagonal = Math.min(numberOfRows - i,
                    numberOfColumns);
            char[] diagonal = new char[numberOfElementsInDiagonal];
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k + i][k];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        // Check diagonal 
        for (int j = 1; j < numberOfColumns - 3; j++) {
            int numberOfElementsInDiagonal = Math.min(numberOfColumns - j,
                    numberOfRows);
            char[] diagonal = new char[numberOfElementsInDiagonal];
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k][k + j];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        // Check diagnol
        for (int j = 3; j < numberOfColumns; j++) {
            int numberOfElementsInDiagonal = Math.min(j + 1, numberOfRows);
            char[] diagonal = new char[numberOfElementsInDiagonal];
 
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k][j - k];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        // Check diagonal 
        for (int i = 1; i < numberOfRows - 3; i++) {
            int numberOfElementsInDiagonal = Math.min(numberOfRows - i,
                    numberOfColumns);
            char[] diagonal = new char[numberOfElementsInDiagonal];
 
            for (int k = 0; k < numberOfElementsInDiagonal; k++)
                diagonal[k] = values[k + i][numberOfColumns - k - 1];
 
            if (fourinarow(diagonal))
                return true;
        }
 
        return false;
    }
 
    public static boolean fourinarow(char[] values) {
        for (int i = 0; i < values.length - 3; i++) {
            boolean isEqual = true;
            for (int j = i; j < i + 3; j++) {
                if (values[j] == '\u0000' || values[j] != values[j + 1]) {
                    isEqual = false;
                    break;
                }
            }
 
            if (isEqual)
                return true;
        }
 
        return false;
    }
}

 
